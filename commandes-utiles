# Active record

## Migrations et données

rake db:create_migration NAME=create_dossier_eleves_table
rake db:migrate
rake db:seed
rake db:rollback

rake traiter_imports

## Créer le hash d'un mot de passe

irb:> require 'bcrypt'
irb:> BCrypt::Password.create('motDePasse')

## Entre dans docker pour lancer rake

docker-compose exec app bash
docker-compose up --build --force-recreat

## Consulter les logs par service (désentrelacer les logs)

docker-compose logs -f app

# Posgres

psql -U dossiersco

Sélectionne la base dossiersco :

\c dossiersco;

Puis montre les tables (dt pour Display Tables) :

\dt

postgres=# ALTER DATABASE dossiersco OWNER TO pblayo;
postgres=# ALTER USER dossiersco WITH PASSWORD 'new_password';

## Afficher sur plusieurs lignes

\x on

## Donne des droits

$ sudo -u postgres -i
postgres@host:~$ psql

postgres=# ALTER USER new_user CREATEDB;


# Sélectionne une version particulière de ruby

rbenv install 2.5.0
rbenv local 2.2.4
rbenv rehash (pour rendre disponibles de nouvelles commandes)

# Heroku

git remote add heroku https://git.heroku.com/dossiersco.git
git push heroku master # pour pousser en prod
heroku open
heroku logs -t
heroku run rake db:migrate
heroku run rake stats
heroku run irb --noreadline

heroku run irb -a dossiersco-staging

En local :

heroku run bash
heroku psql

# Heroku postgres

heroku pg:index_usage
(nécessite heroku plugins:install heroku-pg-extras)

# IRB

# Supprimer des dossiers et les données liées
def supprimer_donnees_eleves(dossiers)
	dossiers.each do |dossier| dossier.resp_legal.each do |resp| resp.destroy end end
	dossiers.each do |dossier| dossier.eleve.option = [] end
	eleves = dossiers.collect(&:eleve)
	dossiers.each do |dossier| dossier.destroy end
	eleves.each do |eleve| eleve.destroy end
end

# Supprimer tout un établissement
malraux = DossierEleve.where(etablissement_id: 227)

# Supprimer les élèves qui ne sont pas en 6è, 5è ou 4è
eleves_3e = DossierEleve.joins(:eleve).where.not("eleves.niveau_classe_ant similar to '(6|5|4)%'")

# Supprime les resp légaux qui ne viennent pas de siècel
RespLegal.select {|r| !r.nom.present? && !r.prenom.present? && !r.lien_de_parente.present?}.map(&:destroy!)

# Afficher les emails de relace pour un établissement
require_relative 'dossiersco_web.rb'
DossierEleve.joins(:eleve).where(etat: 'pas connecté', etablissement_id: 226).map {|d| ["#{d.eleve.prenom} #{d.eleve.nom}", d.resp_legal.map {|r| "#{r.email} #{r.prenom} #{r.nom} #{r.lien_de_parente} #{r.priorite}"}]}

# Afficher un cookie (pour debug)
Marshal.load(Base64.decode64(CGI.unescape(cookie.split("\n").join).split('--').first))
--
OpenSSL::HMAC.hexdigest(OpenSSL::Digest::SHA1.new, session_secret, CGI.unescape(cookie.split('--')[0])) == cookie.split('--')[1]
où session_secret est la valeur de la variable d’environnement SESSION_SECRET


# Copier les données de prod vers staging

heroku pg:copy dossiersco::DATABASE_URL DATABASE_URL -a dossiersco-staging

docker-compose exec postgres bash
dropdb dossiersco -U dossiersco
apt-get update
apt-get install curl
curl https://cli-assets.heroku.com/install.sh | sh
heroku login
export PGUSER=dossiersco
heroku pg:pull dossiersco::DATABASE_URL dossiersco -a dossiersco-staging
