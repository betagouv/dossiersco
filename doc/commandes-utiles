# Active record

## Migrations et données

rake db:create_migration NAME=create_dossier_eleves_table
rake db:migrate
rake db:seed
rake db:rollback

rake traiter_imports

## Créer le hash d'un mot de passe

irb:> require 'bcrypt'
irb:> BCrypt::Password.create('motDePasse')

## Entre dans docker pour lancer rake

docker-compose exec app bash
docker-compose up --build --force-recreat

## Consulter les logs par service (désentrelacer les logs)

docker-compose logs -f app

# Posgres

psql -U dossiersco

Sélectionne la base dossiersco :

\c dossiersco;

Puis montre les tables (dt pour Display Tables) :

\dt

postgres=# ALTER DATABASE dossiersco OWNER TO pblayo;
postgres=# ALTER USER dossiersco WITH PASSWORD 'new_password';

## Afficher sur plusieurs lignes

\x on

## Donne des droits

$ sudo -u postgres -i
postgres@host:~$ psql

postgres=# ALTER USER new_user CREATEDB;


# Sélectionne une version particulière de ruby

rbenv install 2.5.0
rbenv local 2.2.4
rbenv rehash (pour rendre disponibles de nouvelles commandes)

# Heroku

git remote add heroku https://git.heroku.com/dossiersco.git
git push heroku master # pour pousser en prod
heroku open
heroku logs -t
heroku run rake db:migrate
heroku run rake stats
heroku run irb --noreadline

heroku run irb -a dossiersco-staging

En local :

heroku run bash
heroku psql

# Heroku postgres

heroku pg:index_usage
(nécessite heroku plugins:install heroku-pg-extras)

# Scalingo

scalingo --app dossiersco-production env

## Restore un backup de prod en demo

1- dans l'interface d'admin scalingo, aller dans l'appli dossiersco-production -> addons -> PostgreSQL Dashboad -> Backups
2- downloader le backup
3- dans un terminal, configurer un tunnel comme suit : 
  scalingo --app dossiersco-demo env | grep POSTGRESQL
  export SCALINGO_POSTGRESQL=<valeur récupérée à la commande précédente>
  scalingo -a dossiersco-demo db-tunnel $SCALINGO_POSTGRESQL_URL

4- une fois le tunnel ouvert, ouvrir un autre terminal pour restaurer le backup de prod recupéré à l'étape 2
5- l'url SCALINGO_POSTGRESQL en étape 3 est construite comme ci : postgresql://<username>:<password>@<hostname>:<port>/<db>
Créer la variable DATABASE_URL à partir de SCALINGO_POSTGRESQL_URL en remplaçant hostname et port par le tunnel 127.0.0.1:10000
exemple : export DATABASE_URL=postgresql://dossierscoxx:passxx@127.0.0.1:10000/dossiersco_db

Doc Scalingo : https://doc.scalingo.com/databases/postgresql/dump-restore



# Colorer le terminal irb
require 'awesome_print'
ap RespLegal.first


# Supprimer des dossiers et les données liées
def supprimer_donnees_eleves(dossiers)
    dossiers.each do |dossier| dossier.resp_legal.each do |resp| resp.destroy end end
    dossiers.each do |dossier| dossier.eleve.option = [] end
    eleves = dossiers.collect(&:eleve)
    dossiers.each do |dossier| dossier.destroy end
    eleves.each do |eleve| eleve.destroy end
end

# Supprimer tout un établissement
malraux = DossierEleve.where(etablissement_id: 227)

# Supprimer les élèves qui ne sont pas en 6è, 5è ou 4è
eleves_3e = DossierEleve.joins(:eleve).where.not("eleves.niveau_classe_ant similar to '(6|5|4)%'")

# Supprime les resp légaux qui ne viennent pas de siècel
RespLegal.select {|r| !r.nom.present? && !r.prenom.present? && !r.lien_de_parente.present?}.map(&:destroy!)

# Afficher les emails de relace pour un établissement
require_relative 'dossiersco_web.rb'
DossierEleve.joins(:eleve).where(etat: 'pas connecté', etablissement_id: 226).map {|d| ["#{d.eleve.prenom} #{d.eleve.nom}", d.resp_legal.map {|r| "#{r.email} #{r.prenom} #{r.nom} #{r.lien_de_parente} #{r.priorite}"}]}

# Afficher un cookie (pour debug)
Marshal.load(Base64.decode64(CGI.unescape(cookie.split("\n").join).split('--').first))
--
OpenSSL::HMAC.hexdigest(OpenSSL::Digest::SHA1.new, session_secret, CGI.unescape(cookie.split('--')[0])) == cookie.split('--')[1]
où session_secret est la valeur de la variable d’environnement SESSION_SECRET


# Copier les données de prod vers staging

heroku pg:copy dossiersco::DATABASE_URL DATABASE_URL -a dossiersco-staging
heroku pg:psql -a dossiersco-staging
delete from traces;
docker-compose exec postgres bash
dropdb dossiersco -U dossiersco
apt-get update
apt-get install curl
curl https://cli-assets.heroku.com/install.sh | sh
heroku login
export PGUSER=dossiersco
heroku pg:pull dossiersco::DATABASE_URL dossiersco -a dossiersco-staging

# Envoyer un SMS

require 'uri'
require 'net/http'
require 'net/https'
require 'json'
require 'tilt/erb'

# Construction du message

eleve = Eleve.first
template = "<%= eleve.dossier_eleve.etablissement.nom %>: attention, derniers jours pour réinscrire votre enfant <%= eleve.prenom %> sur https://dossiersco.fr/ avec vos identifiants: <%= eleve.identifiant %> et la date de naissance de l'enfant."
template = Tilt['erb'].new { template }
text = template.render(nil,eleve: eleve)

# Avec Nexmo

uri = URI.parse("https://rest.nexmo.com/sms/json")

https = Net::HTTP.new(uri.host,uri.port)
https.use_ssl = true

header = {'Content-Type': 'application/json'}
payload = {
	'api_key':"#{ENV['NEXMO_KEY']}",
	'api_secret':"#{ENV['NEXMO_SECRET']}",
	'from': '33757920180', 'to':"+33662508011", 'text':text}

request = Net::HTTP::Post.new(uri.request_uri, header)
request.body = payload.to_json

response = https.request(request)

# Avec Mailjet

uri = URI.parse("https://api.mailjet.com/v4/sms-send")

https = Net::HTTP.new(uri.host,uri.port)
https.use_ssl = true

header = {'Content-Type': 'application/json', 'Authorization': "Bearer #{ENV['MAILJET_SMS']}"}
payload = {'From': 'DossierSCO', 'To':"+33662508011", 'Text':text}
request = Net::HTTP::Post.new(uri.request_uri, header)
request.body = payload.to_json

response = https.request(request)

# Envoyer les messages en attente

Message.where(etat:"en attente", categorie:"sms").each(&:envoyer)

# Valider le xml

Nous avons utilisé une version d'évaluation de Oxygen XML Editor, obtenue
avec un email généré avec www.guerrillamail.com

Oxygen XML Editor > File > Open
Oxygen XML Editor > Document > Validate > Validate with

Il est indispensable que le zip soit générer sous Mac ou sous Linux avec :

zip -r 0620047PPRIVE2018190910165900.zip 0620047PPRIVE2018190910165900.xml

# Générer le xml pour un robot

require_relative 'dossiersco_web'
require_relative 'dossiersco_agent'
require_relative 'helpers/export_siecle'

etablissement = Etablissement.find(227)
p etablissement.dossier_eleve.where(etat: "validé").count
File.open('malraux.xml', 'w') { |file| file.write(export_xml_tous_les_champs(etablissement, 'export_xml_robot'))}

docker-compose run --rm test rails test test/helpers/application_helper_test.rb

# Pour investiguer des problèmes d'import

Dans app/jobs/importer_siecle.rb, commenter le discard_on puis le begin rescue :

  #discard_on(StandardError) do |_job, error|
  #  ExceptionNotifier.caught(error)
  #end
...
    #begin
...
    #rescue StandardError
    #  tache.update(statut: TacheImport::STATUTS[:en_erreur])
    #  AgentMailer.erreur_import(email).deliver_now
    #end

# Pour passer un script

docker-compose run --rm app rails runner scripts/nettoyage_ville_naiss.rb

# Faire du ménage dans docker

docker volume prune
docker rmi $(docker images --filter "dangling=true" -q --no-trunc)

# Vérifier la conformité d'un fichier de retour dans SIECLE

docker-compose run --rm app ruby scripts/test_siecle.rb 0750680GPRIVE2019200728090617.xml

# Calculer le délais de validation d'un dossier

dossiers = DossierEleve.select {|d| d.etat == "validé"}
dossiers.map {|d| (d.updated_at - d.created_at)/(60*60*24)}.sum / dossiers.count

24 jours pour "validé"
20 jours pour "en attente" : 2.3 jours depuis la 1ère inscription.

created_at n'est pas pertinent car c'est la date de l'import SIECLE

dossiers.map {|d| premiere_connexion = Trace.select {|t| t.identifiant == d.eleve.identifiant && t.created_at > Date.parse('2019-01-01')}.map {|t| t.created_at}.sort.first ; (premiere_connexion.nil? ? 0 : (d.updated_at - premiere_connexion)/(60*60*24)) }.sum / dossiers.count

# Nombre d'élèves inscrits en 6ème

DossierEleve.select {|d| d.etat == "validé" && d.mef_destination.present? && d.mef_destination.libelle =~ /6EME/ }.count

# Trouver l'endroit où une gem est installée dans docker

bundle show "nom d'une gem"

# Tester un git add -p partiel

git stash save --keep-index
make test
git stash pop

# Parcourir les pièces jointes
#

s3cmd --configure
(voir clés dans environnement scalingo)

s3cmd ls -r s3://dossierscoweb/uploads/La GARRIGUETTE/

[Plus d'infos](https://github.com/s3tools/s3cmd)

# Co-auteur

git commit -t .gitmessage

$ cat .gitmessage 
[un sujet qui commence part un verbe au présent]

Co-authored-by: krichtof <christophe.robillard@beta.gouv.fr>
Co-authored-by: yaf <yannick.francois@beta.gouv.fr>
Co-authored-by: pblayo <philippe.blayo@beta.gouv.fr>
Co-authored-by: LucienMLD <lucien.mollard@beta.gouv.fr>



